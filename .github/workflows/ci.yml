name: Python CI

on:
  push:
    branches: [ "main", "dev", "feature/*" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: muscle_analytics_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d muscle_analytics_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      APP_ENV: test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: muscle_analytics_test
      DB_USER: test_user
      DB_PASSWORD: test_password
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_NAME: muscle_analytics_test
      TEST_DB_USER: test_user
      TEST_DB_PASSWORD: test_password
      PYTHONPATH: src

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Wait for PostgreSQL
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if PGPASSWORD=test_password psql -h localhost -U test_user -d muscle_analytics_test -c "SELECT 1" > /dev/null 2>&1; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting... (attempt $i/30)"
          sleep 2
        done

    - name: Set up database schema
      run: |
        echo "Setting up database schema..."
        PGPASSWORD=test_password psql -h localhost -U test_user -d muscle_analytics_test -f docker/init.sql

    - name: Lint with flake8
      run: |
        echo "Running linting checks..."
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      run: |
        echo "Running test suite..."
        pytest -v --tb=short --strict-markers
      env:
        PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true

    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/
      continue-on-error: true

    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
