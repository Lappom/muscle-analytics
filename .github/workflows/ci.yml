name: Python CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: muscle_analytics_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      APP_ENV: test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: muscle_analytics_test
      DB_USER: postgres
      DB_PASSWORD: password
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_NAME: muscle_analytics_test
      TEST_DB_USER: postgres
      TEST_DB_PASSWORD: password

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install flake8 pytest

    - name: Set up database schema
      run: |
        # Install psql client
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if PGPASSWORD=password psql -h localhost -U postgres -d muscle_analytics_test -c "SELECT 1" > /dev/null 2>&1; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting... (attempt $i/30)"
          sleep 2
        done
        
        # Verify PostgreSQL connection with correct user
        echo "Testing PostgreSQL connection..."
        PGPASSWORD=password psql -h localhost -U postgres -d muscle_analytics_test -c "SELECT current_user, current_database();"
        
        # Create database schema
        echo "Setting up database schema..."
        PGPASSWORD=password psql -h localhost -U postgres -d muscle_analytics_test -f docker/init.sql || echo "Schema setup completed with warnings"

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test configuration fix
      run: |
        echo "=== TEST DE LA CORRECTION DE CONFIGURATION ==="
        python test_config_fix.py
    - name: Debug database configuration
      run: |
        echo "=== DEBUG CONFIGURATION DATABASE ==="
        python debug_db_config.py
    - name: Test with pytest
      run: |
        # Debug: Afficher les variables d'environnement DB
        echo "=== VARIABLES D'ENVIRONNEMENT DB ==="
        echo "DB_USER: $DB_USER"
        echo "TEST_DB_USER: $TEST_DB_USER"
        echo "APP_ENV: $APP_ENV"
        echo "POSTGRES_USER: $POSTGRES_USER"
        echo "USER: $USER"
        echo "===================================="
        
        # Debug: Tester la configuration Python
        echo "=== TEST DE CONFIGURATION PYTHON ==="
        python -c "
import os
from src.database import get_database_config, DatabaseEnvironment
config = get_database_config(DatabaseEnvironment.TEST)
print('Configuration Python:', config)
"
        echo "===================================="
        
        pytest
