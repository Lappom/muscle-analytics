"""
Composants pour la barre lat√©rale (sidebar)
"""
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta, date
from typing import Dict, List, Optional, Any, Tuple
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from pathlib import Path
import tempfile
import os

from ..services.api_client import get_api_client
from src.etl.import_scripts import ETLImporter
from src.database import get_database, DatabaseEnvironment

def _check_admin_authentication() -> bool:
    """
    V√©rifie si l'utilisateur a les droits d'administrateur.
    
    Cette fonction impl√©mente une v√©rification de s√©curit√© basique.
    En production, elle devrait √™tre remplac√©e par un syst√®me d'authentification robuste.
    """
    # V√©rification basique via session state (pour d√©monstration)
    # En production, utiliser un syst√®me d'authentification appropri√©
    if 'admin_authenticated' not in st.session_state:
        # Demander l'authentification admin
        st.sidebar.markdown("### üîê Authentification Administrateur")
        admin_password = st.sidebar.text_input(
            "Mot de passe administrateur", 
            type="password",
            key="admin_password_input"
        )
        
        if st.sidebar.button("üîë Se connecter", key="admin_login"):
            # En production, v√©rifier contre une base de donn√©es s√©curis√©e
            # Pour ce d√©monstrateur, utiliser un mot de passe simple
            if admin_password == "admin123":  # √Ä remplacer par un syst√®me s√©curis√©
                st.session_state.admin_authenticated = True
                st.session_state.admin_auth_time = datetime.now()
                st.success("‚úÖ Authentification administrateur r√©ussie")
                st.rerun()
            else:
                st.error("‚ùå Mot de passe incorrect")
                return False
        
        return False
    
    # V√©rifier l'expiration de la session (30 minutes)
    auth_time = st.session_state.get('admin_auth_time')
    if auth_time and (datetime.now() - auth_time) > timedelta(minutes=30):
        del st.session_state.admin_authenticated
        del st.session_state.admin_auth_time
        st.warning("‚ö†Ô∏è Session administrateur expir√©e. Veuillez vous reconnecter.")
        return False
    
    return True

def _show_admin_logout():
    """Affiche le bouton de d√©connexion administrateur"""
    if st.session_state.get('admin_authenticated'):
        if st.sidebar.button("üö™ D√©connexion Admin", key="admin_logout"):
            del st.session_state.admin_authenticated
            del st.session_state.admin_auth_time
            st.success("‚úÖ D√©connexion r√©ussie")
            st.rerun()

# Constantes d√©finies localement en attendant la mise √† jour de config.py
PERIOD_OPTIONS = {
    "üåü Depuis toujours": "all",
    "üìä 1 semaine": 7,
    "üìà 1 mois": 30, 
    "üìâ 3 mois": 90,
    "üìã 6 mois": 180,
    "üìÖ 1 an": 365,
    "üéØ Personnalis√©": None
}

THEMES = ["üåÖ Clair", "üåô Sombre", "ü§ñ Auto"]

def create_api_status_header() -> bool:
    """Cr√©e l'en-t√™te avec le statut de l'API"""
    api_client = get_api_client()
    api_connected = api_client.check_health()
    
    if api_connected:
        st.sidebar.markdown("""
        <div style="
            display: flex; 
            justify-content: center; 
            align-items: center; 
            margin: 0 0 1.5rem 0; 
            padding: 8px 12px;
            background: linear-gradient(135deg, #e8f5e8 0%, #f0fdf4 100%);
            border: 1px solid #22c55e;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(34, 197, 94, 0.1);
        ">
            <span style="
                font-size: 0.85rem; 
                font-weight: 600; 
                color: #16a34a;
                display: flex;
                align-items: center;
                gap: 6px;
            ">‚úÖ API Connect√©e</span>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.sidebar.markdown("""
        <div style="
            display: flex; 
            justify-content: center; 
            align-items: center; 
            margin: 0 0 1.5rem 0; 
            padding: 8px 12px;
            background: linear-gradient(135deg, #fef2f2 0%, #fff5f5 100%);
            border: 1px solid #ef4444;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.1);
        ">
            <span style="
                font-size: 0.85rem; 
                font-weight: 600; 
                color: #dc2626;
                display: flex;
                align-items: center;
                gap: 6px;
            ">‚ùå API D√©connect√©e</span>
        </div>
        """, unsafe_allow_html=True)
        st.sidebar.info("üí° D√©marrez l'API avec `docker compose up` ou `uvicorn src.api.main:app --reload`")
    
    return api_connected

def create_period_section() -> Dict[str, Any]:
    """Cr√©e la section de s√©lection de p√©riode"""
    st.sidebar.markdown("""
    <div style="margin: 0 0 1.25rem 0;">
        <h3 style="
            margin: 0 0 1rem 0; 
            padding: 0;
            color: #1f77b4; 
            font-weight: 700;
            font-size: 1.1rem;
            line-height: 1.2;
            display: flex;
            align-items: center;
            gap: 8px;
        ">üìÖ P√©riode d'Analyse</h3>
        <div style="
            height: 2px;
            background: linear-gradient(90deg, #1f77b4 0%, #3498db 100%);
            border-radius: 1px;
            margin: 0 0 1rem 0;
        "></div>
    </div>
    """, unsafe_allow_html=True)
    
    period_preset = st.sidebar.selectbox(
        "S√©lection rapide",
        list(PERIOD_OPTIONS.keys()),
        index=5,  # 1 an par d√©faut
        help="Choisissez une p√©riode pr√©d√©finie ou personnalisez",
        key='period_preset'
    )
    
    # Calcul des dates selon le preset
    period_value = PERIOD_OPTIONS[period_preset]
    if period_value == "all":
        # Toutes les dates - utilisation de dates tr√®s larges
        default_start = datetime(2000, 1, 1)  # Date tr√®s ancienne
        default_end = datetime.now()
        custom_dates = False
    elif period_value is not None:
        days_back = period_value
        default_start = datetime.now() - timedelta(days=days_back)
        default_end = datetime.now()
        custom_dates = False
    else:
        default_start = datetime.now() - timedelta(days=30)
        default_end = datetime.now()
        custom_dates = True
    
    # Dates personnalis√©es (affich√©es uniquement si personnalis√© est s√©lectionn√©)
    if custom_dates:
        st.sidebar.markdown("""
        <div style="margin: 0.75rem 0 0.5rem 0;">
            <span style="
                font-size: 0.85rem; 
                font-weight: 600; 
                color: #374151;
                display: block;
                margin-bottom: 8px;
            ">üìÖ Dates personnalis√©es</span>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            start_date = st.date_input(
                "D√©but",
                value=default_start.date(),
                max_value=date.today(),
                help="Date de d√©but de l'analyse",
                key='start_date'
            )
        
        with col2:
            end_date = st.date_input(
                "Fin", 
                value=default_end.date(),
                max_value=date.today(),
                help="Date de fin de l'analyse",
                key='end_date'
            )
    else:
        start_date = default_start.date()
        end_date = default_end.date()
    
    return {
        'start_date': start_date.isoformat() if start_date else None,
        'end_date': end_date.isoformat() if end_date else None,
        'period_preset': period_preset,
        'custom_dates': custom_dates
    }





def create_appearance_section() -> Dict[str, Any]:
    """Cr√©e la section de personnalisation d'apparence"""
    with st.sidebar.expander("üé® Personnalisation", expanded=False):
        # Th√®me de l'interface
        st.markdown("""
        <div style="
            font-size: 0.9rem; 
            font-weight: 600; 
            color: #374151;
            margin: 0 0 8px 0;
            padding: 0;
            display: flex;
            align-items: center;
            gap: 6px;
        ">üé® Th√®me de l'interface</div>
        """, unsafe_allow_html=True)
        
        theme = st.selectbox(
            "Th√®me de l'interface",
            THEMES,
            index=0,
            help="Choisissez l'apparence de l'interface",
            label_visibility="hidden",
            key='theme'
        )
        
        # Espacement entre les sections
        st.markdown('<div style="margin: 1.25rem 0;"></div>', unsafe_allow_html=True)
        
        # Pr√©f√©rences d'affichage
        st.markdown("""
        <div style="
            font-size: 0.9rem; 
            font-weight: 600; 
            color: #374151;
            margin: 0 0 12px 0;
            padding: 0;
            display: flex;
            align-items: center;
            gap: 6px;
        ">üìä Pr√©f√©rences d'Affichage</div>
        """, unsafe_allow_html=True)
        
        show_tooltips = st.checkbox(
            "üí° Afficher les info-bulles", 
            value=True,
            help="Activer/d√©sactiver les info-bulles explicatives",
            key='show_tooltips'
        )
        show_animations = st.checkbox(
            "‚ú® Animations des graphiques", 
            value=True,
            help="Activer/d√©sactiver les animations dans les graphiques",
            key='show_animations'
        )
        compact_view = st.checkbox(
            "üì± Vue compacte", 
            value=False,
            help="Optimiser l'affichage pour les petits √©crans",
            key='compact_view'
        )
    
    return {
        'theme': theme.split(" ", 1)[1] if " " in theme else theme,
        'show_tooltips': show_tooltips,
        'show_animations': show_animations,
        'compact_view': compact_view
    }

def create_quick_actions_section():
    """Cr√©e la section des actions rapides"""
    st.sidebar.markdown("""
    <div style="margin: 2rem 0 1.25rem 0;">
        <h3 style="
            margin: 0 0 1rem 0; 
            padding: 0;
            color: #16a085; 
            font-weight: 700;
            font-size: 1.1rem;
            line-height: 1.2;
            display: flex;
            align-items: center;
            gap: 8px;
        ">‚ö° Actions Rapides</h3>
        <div style="
            height: 2px;
            background: linear-gradient(90deg, #16a085 0%, #27ae60 100%);
            border-radius: 1px;
            margin: 0 0 1rem 0;
        "></div>
    </div>
    """, unsafe_allow_html=True)
    
    # Actions rapides - boutons en colonne
    if st.sidebar.button("üì• Export PDF", help="Exporter le rapport en PDF", use_container_width=True):
        st.info("üöß Export PDF en d√©veloppement")
    
    if st.sidebar.button("üîÑ Actualiser", help="Recharger toutes les donn√©es", use_container_width=True):
        st.rerun()
    
    if st.sidebar.button("üßπ R√©initialiser", help="Remettre les filtres par d√©faut", use_container_width=True):
        # R√©initialiser tous les filtres dans le session state
        keys_to_reset = [
            'period_preset',
            'start_date', 
            'end_date',
            'theme',
            'show_tooltips',
            'show_animations',
            'compact_view'
        ]
        
        for key in keys_to_reset:
            if key in st.session_state:
                del st.session_state[key]
        
        st.success("üéØ Filtres r√©initialis√©s avec succ√®s!")
        st.rerun()
    
    # Affichage du statut d'authentification administrateur
    _show_admin_logout()

def create_data_import_section():
    """Cr√©e la section d'import de donn√©es"""
    st.sidebar.markdown("""
    <div style="margin: 2rem 0 1.25rem 0;">
        <h3 style="
            margin: 0 0 1rem 0; 
            padding: 0;
            color: #8e44ad; 
            font-weight: 700;
            font-size: 1.1rem;
            line-height: 1.2;
            display: flex;
            align-items: center;
            gap: 8px;
        ">üìÇ Import de Donn√©es</h3>
        <div style="
            height: 2px;
            background: linear-gradient(90deg, #8e44ad 0%, #9b59b6 100%);
            border-radius: 1px;
            margin: 0 0 1rem 0;
        "></div>
    </div>
    """, unsafe_allow_html=True)
    
    # Section de s√©lection du fichier
    st.sidebar.markdown("""
    <div style="
        font-size: 0.9rem; 
        font-weight: 600; 
        color: #374151;
        margin: 0 0 8px 0;
        padding: 0;
        display: flex;
        align-items: center;
        gap: 6px;
    ">üìÅ S√©lection du fichier</div>
    """, unsafe_allow_html=True)
    
    uploaded = st.sidebar.file_uploader(
        "Fichier d'entra√Ænement",
        type=["csv", "xml"],
        help="S√©lectionnez un fichier CSV ou XML contenant vos donn√©es d'entra√Ænement",
        key="upload_import_file",
        label_visibility="collapsed"
    )
    
    # Section des options d'import
    st.sidebar.markdown("""
    <div style="
        font-size: 0.9rem; 
        font-weight: 600; 
        color: #374151;
        margin: 1rem 0 8px 0;
        padding: 0;
        display: flex;
        align-items: center;
        gap: 6px;
    ">‚öôÔ∏è Options d'import</div>
    """, unsafe_allow_html=True)
    
    force = st.sidebar.checkbox(
        "üîÑ Forcer l'import (ignorer les doublons)",
        value=False,
        help="Ins√®re les donn√©es m√™me si la session existe d√©j√†",
        key="force_import_checkbox"
    )
    
    clear_before = st.sidebar.checkbox(
        "üóëÔ∏è Vider la base avant import",
        value=False,
        help="‚ö†Ô∏è Supprime toutes les donn√©es existantes avant l'import",
        key="clear_before_import"
    )
    
    # Bouton d'import
    st.sidebar.markdown('<div style="margin: 1rem 0 0.5rem 0;"></div>', unsafe_allow_html=True)
    
    if st.sidebar.button("‚¨ÜÔ∏è Lancer l'import", 
                        use_container_width=True, 
                        key="run_import_button",
                        type="primary"):
        if not uploaded:
            st.warning("Veuillez s√©lectionner un fichier CSV ou XML.")
        else:
            # ‚úÖ **V√âRIFICATION DE S√âCURIT√â : Authentification requise pour vider la base**
            if clear_before:
                # V√©rification d'authentification avant suppression
                if not _check_admin_authentication():
                    st.error("‚ùå Acc√®s refus√© : Seuls les administrateurs peuvent vider la base de donn√©es")
                    return
                
                # Confirmation suppl√©mentaire pour suppression
                if not st.session_state.get('confirmed_deletion', False):
                    st.warning("‚ö†Ô∏è ATTENTION : Cette action supprimera TOUTES les donn√©es existantes !")
                    if st.sidebar.button("üîê Confirmer la suppression (Admin uniquement)", type="secondary"):
                        st.session_state.confirmed_deletion = True
                        st.rerun()
                    return
            
            # √âcriture dans un fichier temporaire pour l'ETL
            suffix = Path(uploaded.name).suffix
            tmp_path = None
            try:
                with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
                    file_content = uploaded.getbuffer()
                    tmp.write(file_content)
                    tmp_path = tmp.name
                
                # V√©rification du fichier temporaire
                if os.path.exists(tmp_path):
                    temp_size = os.path.getsize(tmp_path)
                    if temp_size != len(file_content):
                        st.warning(f"‚ö†Ô∏è Diff√©rence de taille d√©tect√©e!")
                
                # D√©tection de gros fichier pour optimisations
                is_large_file = len(file_content) > 1_000_000  # > 1MB
                
                # Lancer l'import ETL
                with st.spinner("üöö Import des donn√©es en cours..."):
                    # ‚úÖ **√âTAPE 1 : Vider la base si demand√© (avec v√©rification de s√©curit√©)**
                    if clear_before:
                        try:
                            db = get_database()
                            # Suppression en cascade dans l'ordre correct
                            sets_deleted = db.execute_update("DELETE FROM sets")
                            sessions_deleted = db.execute_update("DELETE FROM sessions")
                            st.success(f"üóëÔ∏è Base vid√©e : {sets_deleted} s√©ries, {sessions_deleted} sessions supprim√©es")
                            # R√©initialiser la confirmation apr√®s suppression r√©ussie
                            st.session_state.confirmed_deletion = False
                        except Exception as e:
                            st.error(f"‚ùå Erreur lors du vidage : {e}")
                            return
                    
                    # ‚úÖ **√âTAPE 2 : Import des donn√©es**
                    importer = ETLImporter(db_manager=get_database())
                    result = importer.import_file(tmp_path, force_import=force)
                    report = importer.generate_import_report(result)
                # Affichage du r√©sultat
                if result.get('success'):
                    st.success("Import r√©ussi ‚úî")
                    st.code(report)
                    # Forcer le rechargement pour mettre √† jour la liste des exercices
                    st.rerun()
                else:
                    st.error("√âchec de l'import ‚ùå")
                    st.code(report)
            except Exception as e:
                st.error(f"Erreur lors de l'import: {e}")
            finally:
                # Nettoyage du fichier temporaire
                try:
                    if tmp_path and os.path.exists(tmp_path):
                        os.remove(tmp_path)
                except Exception:
                    pass



def create_help_section():
    """Cr√©e la section d'aide et support"""
    with st.sidebar.expander("‚ùì Aide & Support", expanded=False):
        st.markdown("**üöÄ D√©marrage rapide:**")
        st.markdown("""
        1. S√©lectionnez votre p√©riode d'analyse
        2. Choisissez un exercice ou muscle  
        3. Explorez les onglets d'analyse
        """)
        
        st.markdown("**üí° Conseils:**")
        st.markdown("""
        - Utilisez les presets pour analyser rapidement
        - Les filtres avanc√©s permettent une analyse pr√©cise
        - Exportez vos rapports pour les partager
        """)
        
        st.markdown("**üÜò Probl√®mes courants:**")
        st.markdown("""
        - API non connect√©e ‚Üí V√©rifiez le serveur
        - Pas de donn√©es ‚Üí V√©rifiez la p√©riode
        - Graphiques vides ‚Üí Ajustez les filtres
        """)

def create_sidebar() -> Dict:
    """Cr√©e la barre lat√©rale compl√®te avec tous les filtres"""
    # En-t√™te avec status API
    api_connected = create_api_status_header()
    
    # Section p√©riode
    period_data = create_period_section()
    
    # Section apparence
    appearance_data = create_appearance_section()
    
    # Actions rapides
    create_quick_actions_section()
    
    # Section d'import de donn√©es
    create_data_import_section()
    
    # Combinaison de tous les filtres
    filters = {
        **period_data,
        **appearance_data,
        'api_connected': api_connected
    }
    
    # Espacement avant la section d'aide
    st.sidebar.markdown('<div style="margin: 2rem 0;"></div>', unsafe_allow_html=True)
    
    # Section d'aide
    create_help_section()
    
    return filters
