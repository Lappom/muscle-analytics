#!/usr/bin/env python3
"""
Tests pour les am√©liorations de s√©curit√© impl√©ment√©es dans sidebar.py

Ces tests v√©rifient que les op√©rations critiques de base de donn√©es
sont correctement prot√©g√©es par l'authentification administrateur.
"""

import unittest
from unittest.mock import Mock, patch, MagicMock
import sys
from pathlib import Path

# Ajouter les chemins pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from dashboard.components.sidebar import _check_admin_authentication, _show_admin_logout


class TestSecurityImprovements(unittest.TestCase):
    """Tests pour les am√©liorations de s√©curit√©"""

    def setUp(self):
        """Configuration initiale pour chaque test"""
        # Mock de Streamlit
        self.mock_st = Mock()
        self.mock_session_state = {}
        self.mock_st.session_state = self.mock_session_state
        
        # Patcher streamlit
        self.st_patcher = patch('dashboard.components.sidebar.st', self.mock_st)
        self.st_patcher.start()

    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        self.st_patcher.stop()

    def test_admin_authentication_initial_state(self):
        """Test que l'authentification admin est refus√©e par d√©faut"""
        # √âtat initial sans authentification
        self.mock_session_state.clear()
        
        result = _check_admin_authentication()
        
        # V√©rifier que l'authentification est refus√©e
        self.assertFalse(result)
        
        # V√©rifier que l'interface d'authentification est affich√©e
        self.mock_st.sidebar.markdown.assert_called()
        self.mock_st.sidebar.text_input.assert_called()
        self.mock_st.sidebar.button.assert_called()

    def test_admin_authentication_success(self):
        """Test que l'authentification admin r√©ussit avec le bon mot de passe"""
        # Simuler une authentification r√©ussie
        self.mock_session_state['admin_authenticated'] = True
        self.mock_session_state['admin_auth_time'] = Mock()
        
        result = _check_admin_authentication()
        
        # V√©rifier que l'authentification est accept√©e
        self.assertTrue(result)

    def test_admin_authentication_failed_login(self):
        """Test que l'authentification √©choue avec un mauvais mot de passe"""
        # Simuler une tentative de connexion
        self.mock_session_state.clear()
        self.mock_st.sidebar.text_input.return_value = "wrong_password"
        self.mock_st.sidebar.button.return_value = True
        
        # Mock de la v√©rification du mot de passe
        with patch('dashboard.components.sidebar.datetime') as mock_datetime:
            mock_datetime.now.return_value = Mock()
            
            result = _check_admin_authentication()
            
            # V√©rifier que l'authentification √©choue
            self.assertFalse(result)
            
            # V√©rifier que l'erreur est affich√©e
            self.mock_st.error.assert_called_with("‚ùå Mot de passe incorrect")

    def test_admin_session_expiration(self):
        """Test que les sessions admin expirent correctement"""
        from datetime import datetime, timedelta
        
        # Simuler une session expir√©e (plus de 30 minutes)
        old_time = datetime.now() - timedelta(minutes=31)
        self.mock_session_state['admin_authenticated'] = True
        self.mock_session_state['admin_auth_time'] = old_time
        
        result = _check_admin_authentication()
        
        # V√©rifier que l'authentification est refus√©e
        self.assertFalse(result)
        
        # V√©rifier que la session est nettoy√©e
        self.assertNotIn('admin_authenticated', self.mock_session_state)
        self.assertNotIn('admin_auth_time', self.mock_session_state)
        
        # V√©rifier que l'avertissement d'expiration est affich√©
        self.mock_st.warning.assert_called_with("‚ö†Ô∏è Session administrateur expir√©e. Veuillez vous reconnecter.")

    def test_admin_logout_button_display(self):
        """Test que le bouton de d√©connexion s'affiche quand connect√©"""
        # Simuler une session active
        self.mock_session_state['admin_authenticated'] = True
        self.mock_session_state['admin_auth_time'] = Mock()
        
        # Simuler le clic sur le bouton de d√©connexion
        self.mock_st.sidebar.button.return_value = True
        
        _show_admin_logout()
        
        # V√©rifier que le bouton de d√©connexion est affich√©
        self.mock_st.sidebar.button.assert_called_with("üö™ D√©connexion Admin", key="admin_logout")

    def test_admin_logout_functionality(self):
        """Test que la d√©connexion fonctionne correctement"""
        # Simuler une session active
        self.mock_session_state['admin_authenticated'] = True
        self.mock_session_state['admin_auth_time'] = Mock()
        
        # Simuler le clic sur le bouton de d√©connexion
        self.mock_st.sidebar.button.return_value = True
        
        _show_admin_logout()
        
        # V√©rifier que la session est nettoy√©e
        self.assertNotIn('admin_authenticated', self.mock_session_state)
        self.assertNotIn('admin_auth_time', self.mock_session_state)
        
        # V√©rifier que le message de succ√®s est affich√©
        self.mock_st.success.assert_called_with("‚úÖ D√©connexion r√©ussie")

    def test_admin_logout_button_not_displayed_when_not_authenticated(self):
        """Test que le bouton de d√©connexion ne s'affiche pas quand non connect√©"""
        # Pas de session active
        self.mock_session_state.clear()
        
        _show_admin_logout()
        
        # V√©rifier que le bouton de d√©connexion n'est pas affich√©
        self.mock_st.sidebar.button.assert_not_called()


class TestSecurityIntegration(unittest.TestCase):
    """Tests d'int√©gration pour la s√©curit√©"""

    @patch('dashboard.components.sidebar._check_admin_authentication')
    def test_database_clear_protection(self, mock_auth_check):
        """Test que la suppression de base est prot√©g√©e"""
        # Simuler un acc√®s non autoris√©
        mock_auth_check.return_value = False
        
        # Ici, on testerait l'int√©gration compl√®te avec la fonction d'import
        # qui v√©rifie l'authentification avant de vider la base
        
        # Pour l'instant, on v√©rifie juste que la fonction d'authentification est appel√©e
        mock_auth_check.assert_not_called()  # Pas encore appel√©e dans ce test


if __name__ == '__main__':
    # Configuration des tests
    unittest.main(verbosity=2)
