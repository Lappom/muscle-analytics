#!/usr/bin/env python3
"""
D√©monstration des am√©liorations de la m√©thode calculate_estimated_set_duration.

Ce script montre comment la refactorisation am√©liore la testabilit√© et la r√©utilisabilit√©
du calcul de dur√©e des sets.
"""

import sys
import os
import pandas as pd
import numpy as np

# Ajouter le chemin src pour les imports
project_root = os.path.join(os.path.dirname(__file__), '..')
sys.path.append(project_root)

from src.features.calculations import FeatureCalculator


def demo_refactored_duration_calculation():
    """D√©montre les avantages de la m√©thode refactoris√©e."""
    print("=== D√©monstration de la refactorisation du calcul de dur√©e ===\n")
    
    # Cr√©er le calculateur
    feature_calc = FeatureCalculator()
    
    print("1. Test de la m√©thode isol√©e (facilite le debugging)")
    print("   Constantes utilis√©es:")
    print(f"   - SECONDS_PER_REP: {feature_calc.SECONDS_PER_REP} secondes")
    print(f"   - SET_REST_TIME: {feature_calc.SET_REST_TIME} secondes")
    print()
    
    # Test avec diff√©rentes valeurs
    test_reps = [5, 8, 10, 12, 15]
    print("   Tests unitaires de la m√©thode:")
    for reps in test_reps:
        duration = feature_calc.calculate_estimated_set_duration(reps)
        print(f"   {reps} reps ‚Üí {duration} secondes ({duration/60:.1f} minutes)")
    
    print()
    
    # Test des cas limites
    print("2. Gestion des cas limites (valeurs invalides)")
    edge_cases = [0, -5, np.nan, None]
    for case in edge_cases:
        try:
            duration = feature_calc.calculate_estimated_set_duration(case)
            status = "NaN" if pd.isna(duration) else f"{duration} sec"
            print(f"   {case} reps ‚Üí {status}")
        except Exception as e:
            print(f"   {case} reps ‚Üí Erreur: {e}")
    
    print()
    
    print("3. Utilisation dans le calcul des features (r√©utilisabilit√©)")
    
    # Cr√©er des donn√©es d'exemple
    sample_data = pd.DataFrame({
        'session_id': [1, 1, 1, 1],
        'exercise': ['Bench Press', 'Bench Press', 'Squat', 'Squat'],
        'series_type': ['principale', 'principale', 'principale', 'principale'],
        'reps': [10, 8, 12, 6],
        'weight_kg': [100, 110, 120, 130],
        'skipped': [False, False, False, False]
    })
    
    # Calculer les features (qui utilise maintenant la m√©thode refactoris√©e)
    df_with_features = feature_calc.calculate_all_features(sample_data)
    
    print("   Donn√©es avec dur√©es calcul√©es:")
    result_cols = ['exercise', 'reps', 'estimated_set_duration', 'volume_density']
    print(df_with_features[result_cols].to_string(index=False))
    print()
    
    print("4. Avantages de la refactorisation:")
    print("   ‚úì M√©thode testable ind√©pendamment")
    print("   ‚úì Logique de calcul centralis√©e")
    print("   ‚úì Gestion coh√©rente des cas limites")
    print("   ‚úì R√©utilisable dans d'autres contextes")
    print("   ‚úì Facilite la modification des param√®tres")
    print()


def demo_custom_duration_calculation():
    """Montre comment personnaliser le calcul de dur√©e."""
    print("=== Personnalisation du calcul de dur√©e ===\n")
    
    class CustomFeatureCalculator(FeatureCalculator):
        """Calculateur avec param√®tres de dur√©e personnalis√©s."""
        
        # Param√®tres pour un entra√Ænement plus intensif
        SECONDS_PER_REP = 2.0     # R√©p√©titions plus rapides
        SET_REST_TIME = 45        # Repos plus court
    
    # Comparaison entre calculateurs standard et personnalis√©
    standard_calc = FeatureCalculator()
    custom_calc = CustomFeatureCalculator()
    
    print("Comparaison des dur√©es calcul√©es:")
    print("Reps | Standard | Personnalis√© | Diff√©rence")
    print("-" * 45)
    
    for reps in [8, 10, 12]:
        duration_std = standard_calc.calculate_estimated_set_duration(reps)
        duration_custom = custom_calc.calculate_estimated_set_duration(reps)
        diff = duration_std - duration_custom
        
        print(f"{reps:4d} | {duration_std:8.1f} | {duration_custom:12.1f} | {diff:+9.1f}")
    
    print("\nAvantage: param√®tres facilement modifiables pour diff√©rents styles d'entra√Ænement")
    print()


def demo_testing_advantages():
    """D√©montre les avantages pour les tests unitaires."""
    print("=== Avantages pour les tests unitaires ===\n")
    
    feature_calc = FeatureCalculator()
    
    print("Tests simples et cibl√©s possibles:")
    print()
    
    # Exemple de tests unitaires
    test_cases = [
        {"reps": 10, "expected": 10 * 2.5 + 60, "description": "Cas normal"},
        {"reps": 0, "expected": np.nan, "description": "Z√©ro r√©p√©titions"},
        {"reps": -5, "expected": np.nan, "description": "R√©p√©titions n√©gatives"},
        {"reps": np.nan, "expected": np.nan, "description": "Valeur NaN"},
    ]
    
    for i, test in enumerate(test_cases, 1):
        result = feature_calc.calculate_estimated_set_duration(test["reps"])
        
        if pd.isna(test["expected"]):
            success = pd.isna(result)
            expected_str = "NaN"
            result_str = "NaN" if pd.isna(result) else str(result)
        else:
            success = abs(result - test["expected"]) < 0.001
            expected_str = f"{test['expected']}"
            result_str = f"{result}"
        
        status = "‚úì PASS" if success else "‚úó FAIL"
        print(f"{i}. {test['description']}")
        print(f"   Attendu: {expected_str}")
        print(f"   Obtenu:  {result_str}")
        print(f"   {status}")
        print()
    
    print("Avec la m√©thode extraite, ces tests sont rapides et fiables !")


def main():
    """Fonction principale pour ex√©cuter toutes les d√©monstrations."""
    print("üîß D√âMONSTRATION DE LA REFACTORISATION - CALCUL DE DUR√âE")
    print("=" * 65)
    print()
    
    try:
        demo_refactored_duration_calculation()
        demo_custom_duration_calculation()
        demo_testing_advantages()
        
        print("‚úÖ Toutes les d√©monstrations ont √©t√© ex√©cut√©es avec succ√®s!")
        print("\n" + "=" * 65)
        print("R√âSUM√â DES AM√âLIORATIONS:")
        print("‚Ä¢ Extraction de la logique de calcul dans une m√©thode d√©di√©e")
        print("‚Ä¢ Am√©lioration de la testabilit√© et du debugging")
        print("‚Ä¢ Centralisation de la gestion des cas limites")
        print("‚Ä¢ Facilitation de la personnalisation des param√®tres")
        print("‚Ä¢ Code plus maintenable et r√©utilisable")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
